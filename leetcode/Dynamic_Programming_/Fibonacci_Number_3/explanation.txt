Here's a step-by-step explanation of the concept used in the given code:

**Problem Statement:** Calculate the `n`-th Fibonacci number, where the Fibonacci sequence is defined as: `F(0) = 0`, `F(1) = 1`, `F(n) = F(n-1) + F(n-2)` for `n > 1`.

**Code Explanation:**

1. The `fib` function takes an integer `n` as input and returns the `n`-th Fibonacci number.
2. The base case is handled by checking if `n` is equal to 0. If it is, the function returns 0, as `F(0) = 0`.
3. Two integer variables `prevprev` and `prev` are initialized to 0 and 1, respectively. These variables will be used to store the previous two Fibonacci numbers in the sequence.
4. A `for` loop is used to iterate `n-1` times (since the sequence starts from `F(0)` and we want to calculate `F(n)`). The loop variable `i` takes values from 2 to `n`.
5. Inside the loop, the `curr` variable is calculated as the sum of the previous two Fibonacci numbers, `prevprev` and `prev`. This is the `n`-th Fibonacci number.
6. The `prevprev` and `prev` variables are updated to store the new previous two Fibonacci numbers. Specifically, `prevprev` is set to the value of `prev` (i.e., the previous Fibonacci number), and `prev` is set to the value of `curr` (i.e., the new Fibonacci number).
7. After the loop completes, the function returns the value of `prev`, which is the `n`-th Fibonacci number.

**Time Complexity Analysis:** The time complexity of this algorithm is O(n), as it uses a single loop that iterates `n-1` times.

**Space Complexity Analysis:** The space complexity of this algorithm is O(1), as it uses a constant amount of space to store the `prevprev` and `prev` variables, regardless of the input size `n`.