Here's a step-by-step explanation of the concept used in the given code:

1. The code defines a class called `Solution` with a public method `fib` that takes an integer `n` as a parameter.

2. The method `fib` calculates the `n`th number in the Fibonacci sequence. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1.

3. The base case for the Fibonacci sequence is when `n` is 0, in which case the method returns 0.

4. For `n` greater than 0, the method initializes two variables, `prevprev` and `prev`, to the first two numbers in the Fibonacci sequence, which are 0 and 1 respectively.

5. The method then enters a `for` loop that runs `n-1` times. In each iteration of the loop, it calculates the next number in the Fibonacci sequence by adding the previous two numbers (`prevprev` and `prev`).

6. The calculated number is stored in a variable called `curr`, and then `prevprev` and `prev` are updated to the previous two numbers in the sequence.

7. The loop continues until it has calculated the `n`th number in the sequence, which is stored in `prev`.

8. Finally, the method returns the `n`th number in the Fibonacci sequence, which is `prev`.

This approach to calculating the `n`th Fibonacci number is more efficient than directly calculating each number in the sequence, because it avoids recalculating the same numbers over and over again. Instead, it calculates each number only once and stores it in a variable, which allows it to use the previously calculated numbers to calculate the next number in the sequence.